== 3D Photography Using Anaglyphic Stereoscopy

This chapter describes how to create 3D images using anaglyphic stereography.  To see the images in 3D, you'll need to get a pair of "http://www.amazon.com/3D-Glasses-Blue-Anaglyph-Pair/dp/B001D5VCBC/ref=sr_1_33?ie=UTF8&s=toys-and-games&qid=1275613889&sr=8-33[Red/Blue glasses] on Amazon, or alternatively, http://www.labnol.org/home/make-3d-glasses/13776/[hack up a pair yourself].  Once you have the glasses, you'll be able to use the Processing script at the bottom of the page to create and view 3D photographs like <<hydrant>> and <<lake>>.

anchor:hydrant[]

.A fire hydrant

image::attachments/3d_hydrant.png[scaledwidth="90%"]

anchor:lake

.A lake

image::attachments/3d_lake.png[scaledwidth="90%"]

=== Stereoscopy in a Nutshell
Stereoscopy is a technique of fusing two slightly offset images into a single image in a way that creates an illusion of depth.  The classic 3D technique, called anaglyphic stereoscopy, applies a red filter to the left eye's image and a blue filter to the right eye's image.  The offset images are then aligned on the subject and fused into a single image.  When viewed through a pair of 3D glasses, the technique can create a very effective sense of depth.  <<principles>> should give you the basic concept:

anchor:principles[]

.Principles of 3D stereoscpoy

image::attachments/3d_principles.png[scaledwidth="90%"]


=== Take the pictures
The first step is to pick a subject and then take two photographs.  Basically, all you have to do is take the picture as you normally would, and then smoothly slide the camera to the opposite eye and take the same picture again.  As much as you can, try to keep the camera's at the same angle and rotation the same in both images.  Otherwise, you'll have some distortions.  Also, since there is a time lag between images in this techniques, try to keep the subject as still as possible.  

Download the images off your camera and then save them to a common format (JPEG is best for photos).  Be sure to use the same settings, particularly size, when you export them.  Name the left file "l.jpg" and the right file "r.jpg".
 and put them in your sketch's data folder:


The next steps are all performed in the Processing sketch, but I'll explain what's going on before you look at the sketch. 

anchor:align_the_subject[]

=== Align the subject
When you first start the script, you'll see a blurry image with two ghostly images, one red and the other blue.  You must then shift one of the images around until the subject overlaps, which you can do with the following keys:

k::: shift left
l::: shift right
q::: shift up
a::: shift down
1::: shift by 10 pixels at a time
2::: shift by 1 pixel at a time (for fine adjustments)
e::: save the merged image to a file

When you've completed the process, the image will look almost normal, but you'll notice that objects in the background of the image will have a sort of subtle halo of red or blue around them.

=== Compute the overlapped region
As you shift the images around, you're only interested in keeping the portions that overlap.  This is a bit tricky to code, and there are many possible approaches.  Here's the approach I took.

Imagine for a moment that both images have been printed in color on http://www.amazon.com/Premium-InkJet-Transparency-Sheets-C3834A/dp/B00000JKJ2[transparency film].  Next, suppose you held the right image still (it doesn't matter which, but I'm going to use the right image in this example) and treated its upper-left corner as the origin (0,0).  Finally, imagine sliding the left image around on top of the now stationary right image.  The X and Y offsets between the two images' upper-left corner is now a convenient measure of the relative shift.  (From now on, I'll call the X-offset rx and the Y-offset ry.)  Initially, everything on both images overlapped, but as you moved the left piece around to align the subjects, portions of it would stick out over the sides of the stationary image.  Since we're only interested in where the two images overlap, we need to trim away the portions that stick out.

[NOTE]
====
You can find the full code listing for this project, https://github.com/odewahn/codebox-code/blob/master/3d_photography.pde[3d_photography.pde], on this book's https://github.com/odewahn/codebox-code[github repository].
====

////

I made some changes to the code (images live in the data directory, and I fixed some misspellings and added some whitespace here and there.) You may want to push this version back to the github repo.

////

Now to implement the model in Processing.  Here's the source:

----
PImage left;
PImage right;
String outfile = "out.jpg";

int rx = 0;  // x offset
int ry = 0;  // y offset
int dSize = 10;  // # of pixels to shift
Intersection overlap;

PImage merged;


// Create a merged image
// 
PImage merge() {
  int loc;
  PImage merged = createImage(overlap.w, overlap.h, RGB);
  left.loadPixels();
  right.loadPixels();
  merged.loadPixels();

  // now process the left and right pixels one by one and merge them 
  // into a new color
  for (int x = 0; x < overlap.w; x++) {
    for (int y = 0; y < overlap.h; y++) {
      overlap.findEquivPoint(x,y);
      loc = overlap.eqX1 + overlap.eqY1*overlap.W;
      //Pull out RGB for the left image
      float r1 = red(left.pixels[loc]);
      float g1 = green(left.pixels[loc]);
      float b1 = blue(left.pixels[loc]);
      // Pull rgb for the right image
      loc = overlap.eqX2 + overlap.eqY2*overlap.W;
      float r2 = red(right.pixels[loc]);
      float g2 = green(right.pixels[loc]);
      float b2 = blue(right.pixels[loc]);
      //Compute new pixel color in the merged image
      float r = 0.299 * r1 + 0.587 * g1 + 0.114 * b1;
      float g = g2;
      float b = b2;
      //Now set new color
      loc = x + y*merged.width;
      merged.pixels[loc] = color(r,g,b);
    }
  }
  return merged;
}


void setup() {
  left = loadImage("l.jpg");
  right = loadImage("r.jpg");

  size(left.width, left.height); 
  overlap = new Intersection(left.width, left.height); // <1>
  overlap.setOffset(0,0); // <2>
  merged = merge();
}


void keyPressed() {
  switch (key) {
     case 'q':
        ry -= dSize;
        break;
     case 'a':
        ry += dSize;
        break;
     case 'l':
        rx += dSize;
        break;
     case 'k':
        rx -= dSize;
        break;
     case '1':
        dSize = 10;
        break;
     case '2':
        dSize = 1;
        break;
     case 'e':
        merged.save(outfile);
        break;
  }
  overlap.setOffset(rx,ry);
  merged = merge();
}

void draw() {
   background(#ffffff);
   image(merged,0,0);
}  

class Intersection {

  // Defines the overlap region
  int w, h; // width and height of overlap 1
  int x, y; // x,y of the top left point of the overlap
  
  // Defines the width and height of the 2 regions.  They must be of 
  // equal size.
  int W, H;  // Width and height of the 2 regions
  int rx, ry;  // x,y position of region
  
  // Defines the mapping of a point p in the overlap into a point 
  // in region 1 and region 2
  int eqX1, eqY1;
  int eqX2, eqY2;
  
  //Construct a new region
  Intersection(int _W, int _H) {
    W = _W;
    H = _H;
  }
  
  // Set the offset values of region 2
  void setOffset (int _rx, int _ry) {
    rx = _rx;
    ry = _ry;
    compute();
  }
  
  //Computes the intersection between the two image based on the 
  // current offset
  void compute() { // <3>
    if (rx < 0) {
       if (ry < 0) {
          // Case A
          w = W + rx;
          h = H + ry;
          x = 0;
          y = 0;
       } else {
          //Case C
          w = W + rx;
          h = H - ry;
          x = 0;
          y = ry;
       }
    } else {
       if (ry < 0) {
          //Case B
          w = W - rx;
          h = H + ry;
          x = rx;
          y = 0;
       } else {
          //Case D
          w = W - rx;
          h = H - ry;
          x = rx;
          y = ry;
       }
    }
  }
  
  // Given a point (x,y) in the intersection, this method 
  // finds the corresponding point in the 2 regions
  //
  void findEquivPoint (int x, int y) {
    if (rx < 0) {
       if (ry < 0) {
          // Case A
          eqX1 = x;
          eqY1 = y;
          eqX2 = x - rx;
          eqY2 = y - ry;
       } else {
          //Case C
          eqX1 = x;
          eqY1 = y + ry;
          eqX2 = x - rx;
          eqY2 = y;
       }
    } else {
       if (ry < 0) {
          //Case B
          eqX1 = x + rx;
          eqY1 = y;
          eqX2 = x;
          eqY2 = y - ry;
       } else {
          //Case D
          eqX1 = x + rx;
          eqY1 = y + ry;
          eqX2 = x;
          eqY2 = y;
       }
    }     
  }
}
----

<1> First, we'll characterize the overlapping area first by its width and height.  
<2> Second, we'll define its X and Y position as the location of its upper-left corner as it falls within the stationary image.  <<quadrants>> (hopefully!) illustrates this rather abstract concept.  It presents a matrix of possible scenarios for rx and ry, as well as a simple diagram that shows how the overlap (represented by diagonal lines) is defined in that scenario.
<3> Armed with this diagram, have a look at the code that calculates this overlap.  (In compute(), W is the width of the two images and H is their height.)  


Before you run the sketch, you need to put the image files in place: 
. Select Sketch->Show Sketch Folder from within Processing, and create a subdirectory called _data_ in this folder.
. Copy l.jpg and r.jpg into this folder.

Run the sketch. Align the images using the keystrokes described in <<align_the_subject>>, and press e to save the file. You'll find a file called out.jpg in the Sketch folder containing your anaglyph.

anchor:quadrants[]

.Possible overlap options

image::attachments/3d_quadrants.png[scaledwidth="90%"]

Merging the filtered images is a relatively straightforward application of the technique outlined in create image filters. The main difference in the sketch presented here and the one in the Answer on filters is that I've solved the matrix multiplications for the "half color anaglyph" described in this Anaglyph Methods Comparison. This makes he code a good bit faster.